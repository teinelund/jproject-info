@startuml
package jproject_info <<Frame>> {
  +class Application {
      +{static}main(String[] args) : void
      +Application(context : Context, command : ParseCommandLineArgumentsCommand)
      ~execute(String[] args) void
      ~printErrorMessage(List<NonValidJavaProjectPath> nonValidJavaProjectPaths) : void
  }

  Application "1" *-- Application

  +interface ApplicationComponent {
      +{abstract}buildApplication() : Application
  }

  ApplicationComponent -- Application
}



package command_line_parameters_parser <<Frame>> {
  +interface ParametersModule {
      +{abstract}provideParameters() : Parameters
  }

  +interface Parameters {
      +{abstract}getJavaProjectPaths() : Set<Path>
      +{abstract}isVerbose() : boolean
      +{abstract}isHelpOption() : boolean
      +{abstract}isVersionOption() : boolean
      +{abstract}isPathInfo() : boolean
  }

  ~class ParametersImpl {
      -javaProjectPaths : Set<Path>
      -javaProjectPathsNames : List<String>
      -pathInfo : boolean
      -verbose : boolean
      -help : boolean
      -version : boolean
  }

  note as ParametersImplNote
      Fields are anotated with <i>@Parameter</i>
      from <i>JCommander</i>.
  end note

  Parameters <|.. ParametersImpl

  ParametersImpl .. ParametersImplNote

  ParametersModule o-- ParametersImpl
}



package common <<Frame>> {
    +class VerboseOutput {
        +verboseOutput(parameters : Parameters, text : String)
    }

    VerboseOutput -- Parameters
}



package context <<Frame>> {
  +interface Context {
      +{abstract}getProjects() : Collection<Project>
      +{abstract}setCommandLineArguments(args : String[])
      +{abstract}getCommandLineArguments() : String[]
      +{abstract}getParameters() : Parameters
      +{abstract}setJCommander(jc : JCommander)
      +{abstract}getJCommander() : JCommander
      +{abstract}setProjects(projects : Collection<Project>)
  }

  ~class ContextImpl {
      +ContextImpl(parameters : Parameters)
  }

  +class ContextModule {
      +provideContext(parameters : Parameters) : Context
  }

  ContextModule "1" o-- ContextImpl

  Context <|.. ContextImpl



  +interface Project {
      +{abstract}getProjectPath() : Path
      +{abstract}getRootPath() : Path
  }

  ~abstract class AbstractProject {
      +AbstractProject(rootPath : Path, projectPath : Path)
  }

  Project <|.. AbstractProject



  +interface MavenProject {
  }

  ~class MavenProjectImpl {
      +MavenProjectImpl(rootPath : Path, projectPath : Path)
  }

  Project <|-- MavenProject
  AbstractProject <|-- MavenProjectImpl
  MavenProject <|.. MavenProjectImpl

  +interface JavaSourceProject {
  }

  ~class JavaSourceProjectImpl {
      +JavaSourceProjectImpl(rootPath : Path, projectPath : Path)
  }

  Project <|-- JavaSourceProject
  AbstractProject <|-- JavaSourceProjectImpl
  JavaSourceProject <|.. JavaSourceProjectImpl



  +class ProjectFactory {
      +{static}createMavenProject(rootPath : Path, projectPath : Path) : Project
      +{static}createJavaSourceProject(rootPath : Path, projectPath : Path) : Project
  }

  ProjectFactory o-- MavenProjectImpl
  ProjectFactory o-- JavaSourceProjectImpl
  Project -- ProjectFactory
}



package commands <<Frame>> {
  +interface Command {
      +{abstract}execute() : void
  }

  ~abstract class AbstractCommand {
      +AbstractCommand(context : Context)
  }

  Context -- AbstractCommand
  Command <|.. AbstractCommand
  VerboseOutput <|-- AbstractCommand



  +interface ParseCommandLineArgumentsCommand {
  }

  ~class ParseCommandLineArgumentsCommandImpl {
      +ParseCommandLineArgumentsCommandImpl(context : Context, command : ValidateCommandLineArgumentsCommand)
  }

  Command <|-- ParseCommandLineArgumentsCommand
  ParseCommandLineArgumentsCommand <|.. ParseCommandLineArgumentsCommandImpl
  AbstractCommand <|-- ParseCommandLineArgumentsCommandImpl
  ParseCommandLineArgumentsCommandImpl -- ValidateCommandLineArgumentsCommand

  +interface ValidateCommandLineArgumentsCommand {
  }

  +class ValidateCommandLineArgumentsCommandImpl {
    +ValidateCommandLineArgumentsCommandImpl(context : Context, controller : Controller)
    ~validateJavaProjectPaths(javaProjectPaths : Set<Path>) : List<NonValidJavaProjectPath>
  }

  Command <|-- ValidateCommandLineArgumentsCommand
  ValidateCommandLineArgumentsCommand <|.. ValidateCommandLineArgumentsCommandImpl
  AbstractCommand <|-- ValidateCommandLineArgumentsCommandImpl


  +interface ProjectInformationCommand {
  }

  ~class ProjectInformationCommandImpl {
    +ProjectInformationCommandImpl(context : Context)
    ~normalizePaths(paths : Set<Path>) : Set<Path>
    ~verifyNoSubPaths(normalizedPaths : Set<Path>)
    ~fetchProject(rootPath : Path, path : Path, projects : Collection<Project>)
    ~isMavenProject(path : Path) : boolean
    ~isJavaSourceProject(path : Path) : boolean
  }

  Command <|-- ProjectInformationCommand
  ProjectInformationCommand <|.. ProjectInformationCommandImpl
  AbstractCommand <|-- ProjectInformationCommandImpl


  +class CommandModule {
      +provideParseCommandLineArguments(context : Context, command : ValidateCommandLineArgumentsCommand) : ParseCommandLineArgumentsCommand
      +provideValidateCommandLineArgumentsCommnd(context : Context, controller : Controller) : ValidateCommandLineArgumentsCommand
  }

  CommandModule o-- ParseCommandLineArgumentsCommandImpl
  CommandModule -- ParseCommandLineArgumentsCommand
  CommandModule o-- ValidateCommandLineArgumentsCommandImpl
  CommandModule -- ValidateCommandLineArgumentsCommand


  +class ValidateCommandLineArgumentsException <<Exception>> {
  }
}


package controller <<Frame>> {

    +interface Controller {
         +{abstract}execute()
    }

    +class ControllerImpl {
        +ControllerImpl(context : Context, printHelpStrategy : PrintHelpStrategy, printVersionStrategy : PrintVersionStrategy, pathInformationStrategy : PathInformationStrategy)
    }

    Controller <|.. ControllerImpl
    VerboseOutput <|-- ControllerImpl
    Context -- ControllerImpl

    +class ControllerModule {
        +provideController(context : Context, printHelpStrategy : PrintHelpStrategy, printVersionStrategy : PrintVersionStrategy, pathInformationStrategy : PathInformationStrategy) : Controller
    }

    ControllerModule o-- ControllerImpl
    CommandModule -- Controller
}



package strategy <<Frame>> {
    +interface Strategy {
        +{abstract}execute()
    }

    ~class AbstractStrategy {
        +AbstractStrategy(context : Context)
    }

    Strategy <|.. AbstractStrategy
    Context -- AbstractStrategy

    +interface PrintHelpStrategy {
    }

    +class PrintHelpStrategyImpl {
    }

    PrintHelpStrategy <|.. PrintHelpStrategyImpl
    AbstractStrategy <|-- PrintHelpStrategyImpl

    +interface PrintVersionStrategy {
    }

    +class PrintVersionStrategyImpl {
    }

    PrintVersionStrategy <|.. PrintVersionStrategyImpl
    AbstractStrategy <|-- PrintVersionStrategyImpl

    +class VersionProvider {
    }

    PrintVersionStrategyImpl *-- VersionProvider

    +interface PathInformationStrategy {
    }

    +class PathInformationStrategyImpl {
    }

    PathInformationStrategy <|.. PathInformationStrategyImpl
    AbstractStrategy <|-- PathInformationStrategyImpl

    +class StrategyModule {
        +providePrintHelpStrategy(context : Context) : PrintHelpStrategy
        +providePrintVersionStrategy(context : Context) : PrintVersionStrategy
        +providePathInformationStrategy(context : Context, command : ProjectInformationCommand) : PathInformationStrategy
    }

    Context -- StrategyModule
    StrategyModule o-- PrintHelpStrategyImpl
    StrategyModule -- PrintHelpStrategy
    StrategyModule o-- PrintVersionStrategyImpl
    StrategyModule -- PrintVersionStrategy
    StrategyModule o-- PathInformationStrategyImpl
    StrategyModule -- PathInformationStrategy

}

Application -- NonValidJavaProjectPath
Application -- Context
Application -- ParseCommandLineArgumentsCommand
Application -- ValidateCommandLineArgumentsException

@enduml